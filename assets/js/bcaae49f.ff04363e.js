"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[96368],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function m(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),i=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):m(m({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=i(r),g=a,d=u["".concat(s,".").concat(g)]||u[g]||c[g]||o;return r?n.createElement(d,m(m({ref:t},l),{},{components:r})):n.createElement(d,m({ref:t},l))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,m=new Array(o);m[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,m[1]=p;for(var i=2;i<o;i++)m[i]=r[i];return n.createElement.apply(null,m)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4609:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>m,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var n=r(87462),a=(r(67294),r(3905));const o={id:"kubernetes",title:"Memgraph Helm Chart",sidebar_label:"Kubernetes"},m=void 0,p={unversionedId:"reference-guide/deployment/kubernetes",id:"reference-guide/deployment/kubernetes",title:"Memgraph Helm Chart",description:"If you need Memgraph as a part of your Kubernetes cluster, you can use the below Helm Chart for a simple setup. The Helm Chart is a collection of files that describe a related set of Kubernetes resources. Memgraph is a stateful application because it saves data to persistent disk storage for the server, clients, and other applications. The apiVersion is set to apps/v1, which means the below chart supports Helm version 3 or less.",source:"@site/docs/reference-guide/deployment/kubernetes.md",sourceDirName:"reference-guide/deployment",slug:"/reference-guide/deployment/kubernetes",permalink:"/memgraph-docs/memgraph/next/reference-guide/deployment/kubernetes",draft:!1,editUrl:"https://github.com/memgraph/docs/tree/master/docs/reference-guide/deployment/kubernetes.md",tags:[],version:"current",frontMatter:{id:"kubernetes",title:"Memgraph Helm Chart",sidebar_label:"Kubernetes"},sidebar:"memgraph",previous:{title:"Docker",permalink:"/memgraph-docs/memgraph/next/reference-guide/deployment/docker"},next:{title:"Indexing",permalink:"/memgraph-docs/memgraph/next/reference-guide/indexing"}},s={},i=[],l={toc:i};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you need Memgraph as a part of your ",(0,a.kt)("strong",{parentName:"p"},"Kubernetes")," cluster, you can use the below ",(0,a.kt)("strong",{parentName:"p"},"Helm Chart")," for a simple setup. The Helm Chart is a collection of files that describe a related set of Kubernetes resources. Memgraph is a ",(0,a.kt)("strong",{parentName:"p"},"stateful application")," because it saves data to persistent disk storage for the server, clients, and other applications. The ",(0,a.kt)("inlineCode",{parentName:"p"},"apiVersion")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"apps/v1"),", which means the below chart supports Helm version 3 or less."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# StatefulSet\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: memgraph\n  labels:\n    app.kubernetes.io/name: memgraph\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  serviceName: memgraph-svc\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: memgraph\n  podManagementPolicy: OrderedReady\n  updateStrategy:\n        type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: memgraph\n    spec:\n      containers:\n        - name: memgraph\n          image: "memgraph/memgraph:latest"\n          imagePullPolicy: Never\n          ports:\n            - name: memgraph\n              containerPort: 7687\n          volumeMounts:\n            - name: memgraph-lib-storage\n              mountPath: /var/lib/memgraph\n            - name: memgraph-log-storage\n              mountPath: /var/log/memgraph\n            - name: memgraph-etc-config\n              mountPath: /etc/memgraph/memgraph.conf\n              subPath: memgraph.conf\n      volumes:\n        - name: memgraph-lib-storage\n          persistentVolumeClaim:\n            claimName: memgraph-lib-pv-claim\n        - name: memgraph-log-storage\n          persistentVolumeClaim:\n            claimName: memgraph-log-pv-claim\n        - name: memgraph-etc-config\n          configMap:\n            name: memgraph-config\n---\n# Service\napiVersion: v1\nkind: Service\nmetadata:\n  name: memgraph-svc\n  labels:\n    app.kubernetes.io/name: memgraph\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - port: 7687\n      targetPort: 7687\n      protocol: TCP\n      name: bolt\n  selector:\n    app.kubernetes.io/name: memgraph\n')))}c.isMDXComponent=!0}}]);